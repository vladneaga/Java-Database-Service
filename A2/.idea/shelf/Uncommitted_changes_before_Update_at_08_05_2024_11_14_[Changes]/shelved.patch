Index: src/main/java/de/hshn/mi/pdbg/basicservice/services/BasicDBServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.hshn.mi.pdbg.basicservice.services;\r\n\r\nimport de.hshn.mi.pdbg.PersistentObject;\r\nimport de.hshn.mi.pdbg.basicservice.BasicDBService;\r\nimport de.hshn.mi.pdbg.basicservice.EntityImpl.HospitalStayImpl;\r\nimport de.hshn.mi.pdbg.basicservice.EntityImpl.PatientImpl;\r\n\r\nimport de.hshn.mi.pdbg.basicservice.EntityImpl.WardImpl;\r\nimport de.hshn.mi.pdbg.basicservice.HospitalStay;\r\nimport de.hshn.mi.pdbg.basicservice.Patient;\r\nimport de.hshn.mi.pdbg.basicservice.Ward;\r\nimport de.hshn.mi.pdbg.exception.StoreException;\r\n\r\nimport java.sql.Connection;\r\nimport java.sql.DriverManager;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.SQLException;\r\nimport java.sql.ResultSet;\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\nimport java.util.List;\r\n/**\r\n * Implementation of the BasicDBService interface. Provides methods to interact with the medical database service.\r\n * Manages the creation, retrieval, and removal of patients, wards, and hospital stays.\r\n * Implements methods for database storage and retrieval.\r\n *\r\n * @author Neaga Vlad, Abdul Satar Amiri\r\n * @version 1.0\r\n */\r\n\r\npublic class BasicDBServiceImpl implements BasicDBService {\r\n    private String dbUrl;\r\n    private  String user;\r\n    private String pass;\r\n    private Connection conn;\r\n\r\n    public String getDB_URL() {\r\n        return dbUrl;\r\n    }\r\n\r\n    public String getUSER() {\r\n        return user;\r\n    }\r\n\r\n    public String getPASS() {\r\n        return pass;\r\n    }\r\n\r\n    /**\r\n     * Constructs a database service with the specified database URL, username, and password.\r\n     *\r\n     * @param dbUrl The connection-String of the database.\r\n     * @param user   The login credentials for accessing the database.\r\n     * @param pass   The password for accessing the database.\r\n     */\r\n\r\n    public BasicDBServiceImpl(String dbUrl, String user, String pass) {\r\n        this.dbUrl = dbUrl;\r\n        this.user = user;\r\n        this.pass = pass;\r\n        try {\r\n            conn = DriverManager.getConnection(dbUrl, user, pass);\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n    public Connection getConnection() {\r\n        return conn;\r\n    }\r\n\r\n    @Override\r\n    public Patient createPatient(String nachname, String vorname) {\r\n        Patient patient = new PatientImpl(this);\r\n        patient.setFirstname(vorname);\r\n        patient.setLastname(nachname);\r\n\r\n        return patient;\r\n    }\r\n\r\n    @Override\r\n    public Ward createWard(String bezeichnung, int bettenzahl) {\r\n        Ward ward = new WardImpl(this);\r\n        ward.setName(bezeichnung);\r\n        ward.setNumberOfBeds(bettenzahl);\r\n\r\n        return ward;\r\n    }\r\n\r\n    @Override\r\n    public HospitalStay createHospitalStay(Patient patient, Ward ward, Date date) {\r\n        if (date == null || patient == null || ward == null) {\r\n            throw new AssertionError(\"Null parameter\");\r\n        }\r\n        return new HospitalStayImpl(this, date, null, ward, patient);\r\n    }\r\n\r\n    @Override\r\n    public void removeHospitalStay(long id) {\r\n        restoreConnection();\r\n        if (id <= 0 || id == PersistentObject.INVALID_OBJECT_ID) {\r\n            throw new AssertionError(\"The Hospital Stay ID should be greate than 0\");\r\n        }\r\n        String sqlDelete = \"DELETE FROM Aufenthalt WHERE ID = ?\";\r\n\r\n        try (PreparedStatement pstmt = conn.prepareStatement(sqlDelete)) {\r\n            pstmt.setLong(1, id);\r\n\r\n            int rowsDeleted = pstmt.executeUpdate();\r\n\r\n            if (rowsDeleted <= 0) {\r\n                throw new StoreException(\"Hospital Stay with id \" + id + \" does not exist\");\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public List<Patient> getPatients(String lastname, String firstname, Date startDate, Date endDate) {\r\n        restoreConnection();\r\n        PreparedStatement pstmt = null;\r\n        ResultSet resultSet = null;\r\n        List<Patient> patients = new ArrayList<>();\r\n\r\n        try {\r\n            StringBuilder queryBuilder = new StringBuilder(\"SELECT p.ID, Vorname, Nachname, Geburtsdatum, Krankenkasse,\"\r\n                    + \"Versicherungsnummer FROM Patient p \");\r\n            queryBuilder.append(\"JOIN Person pe ON p.ID = pe.ID WHERE 1=1\");\r\n\r\n            if (lastname != null) {\r\n                queryBuilder.append(\" AND Nachname LIKE ?\");\r\n            }\r\n            if (firstname != null) {\r\n                queryBuilder.append(\" AND Vorname LIKE ?\");\r\n            }\r\n            if (startDate != null) {\r\n                queryBuilder.append(\" AND Geburtsdatum >= ?\");\r\n            }\r\n            if (endDate != null) {\r\n                queryBuilder.append(\" AND Geburtsdatum <= ?\");\r\n            }\r\n\r\n            pstmt = getConnection().prepareStatement(queryBuilder.toString());\r\n\r\n            int paramIndex = 1;\r\n            if (lastname != null) {\r\n                pstmt.setString(paramIndex++, /*\"%\" +*/ lastname /*+ \"%\"*/);\r\n            }\r\n            if (firstname != null) {\r\n                pstmt.setString(paramIndex++, /*\"%\" +*/ firstname /*+ \"%\"*/);\r\n            }\r\n            if (startDate != null) {\r\n                pstmt.setDate(paramIndex++, new java.sql.Date(startDate.getTime()));\r\n            }\r\n            if (endDate != null) {\r\n                pstmt.setDate(paramIndex++, new java.sql.Date(endDate.getTime()));\r\n            }\r\n\r\n            resultSet = pstmt.executeQuery();\r\n\r\n            while (resultSet.next()) {\r\n                long patientID = resultSet.getLong(\"ID\");\r\n                String firstName = resultSet.getString(\"Vorname\");\r\n                String lastName = resultSet.getString(\"Nachname\");\r\n                Date dateOfBirth = resultSet.getDate(\"Geburtsdatum\");\r\n                String healthInsurance = resultSet.getString(\"Krankenkasse\");\r\n                String insuranceNumber = resultSet.getString(\"Versicherungsnummer\");\r\n                Patient patient = new PatientImpl(this, patientID, healthInsurance, insuranceNumber, lastName,\r\n                        firstName, dateOfBirth);\r\n\r\n                patients.add(patient);\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        return patients;\r\n    }\r\n\r\n    @Override\r\n        public Patient getPatient(long patientID) {\r\n        restoreConnection();\r\n        if (patientID <= 0 || patientID == PersistentObject.INVALID_OBJECT_ID) {\r\n            throw new AssertionError(\"The Patient ID should be greate than 0\");\r\n        }\r\n        PreparedStatement pstmt = null;\r\n        ResultSet resultSet = null;\r\n        Patient patient = null;\r\n\r\n        try {\r\n            String query = \"SELECT p.ID, Vorname, Nachname, Geburtsdatum, Krankenkasse,\" +\r\n                    \"Versicherungsnummer FROM Patient p \" + \"JOIN Person pe ON p.ID = pe.ID WHERE p.ID = ?\";\r\n\r\n            pstmt = getConnection().prepareStatement(query);\r\n            pstmt.setLong(1, patientID);\r\n            resultSet = pstmt.executeQuery();\r\n\r\n            if (resultSet.next()) {\r\n                String firstName = resultSet.getString(\"Vorname\");\r\n                String lastName = resultSet.getString(\"Nachname\");\r\n                Date dateOfBirth = resultSet.getDate(\"Geburtsdatum\");\r\n                String healthInsurance = resultSet.getString(\"Krankenkasse\");\r\n                String insuranceNumber = resultSet.getString(\"Versicherungsnummer\");\r\n                patient = new PatientImpl(this, patientID, healthInsurance, insuranceNumber,\r\n                        lastName, firstName, dateOfBirth);\r\n\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return patient;\r\n    }\r\n\r\n    @Override\r\n    public List<Ward> getWards() {\r\n        restoreConnection();\r\n        try {\r\n            if (getConnection().isClosed()) {\r\n                this.conn = DriverManager.getConnection(getDB_URL(), getUSER(), getPASS());\r\n            }\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n        List<Ward> wards = new ArrayList<>();\r\n        Connection connection = null;\r\n        PreparedStatement pstmt = null;\r\n        ResultSet resultSet = null;\r\n\r\n        try {\r\n            connection = getConnection();\r\n            String query = \"SELECT ID, Bezeichnung, Bettenzahl FROM Station\";\r\n\r\n            pstmt = connection.prepareStatement(query);\r\n            resultSet = pstmt.executeQuery();\r\n\r\n            while (resultSet.next()) {\r\n                long wardID = resultSet.getLong(\"ID\");\r\n                String name = resultSet.getString(\"Bezeichnung\");\r\n                int numberOfBeds = resultSet.getInt(\"Bettenzahl\");\r\n\r\n                Ward ward = new WardImpl(this, wardID, numberOfBeds, name);\r\n                wards.add(ward);\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        return wards;\r\n    }\r\n\r\n    @Override\r\n    public Ward getWard(long wardID) {\r\n        restoreConnection();\r\n        if (wardID <= 0 || wardID == PersistentObject.INVALID_OBJECT_ID) {\r\n            throw new AssertionError(\"The Ward ID should be greate than 0\");\r\n        }\r\n        Connection connection = null;\r\n        PreparedStatement pstmt = null;\r\n        ResultSet resultSet = null;\r\n        Ward ward = null;\r\n\r\n        try {\r\n            connection = getConnection();\r\n            String query = \"SELECT Bezeichnung, Bettenzahl FROM Station WHERE ID = ?\";\r\n            pstmt = connection.prepareStatement(query);\r\n            pstmt.setLong(1, wardID);\r\n            resultSet = pstmt.executeQuery();\r\n\r\n            if (resultSet.next()) {\r\n                String name = resultSet.getString(\"Bezeichnung\");\r\n                int numberOfBeds = resultSet.getInt(\"Bettenzahl\");\r\n                ward = new WardImpl(this, wardID, numberOfBeds, name);\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return ward;\r\n    }\r\n\r\n    @Override\r\n    public List<HospitalStay> getHospitalStays(long patientID) {\r\n        restoreConnection();\r\n        if (patientID <= 0 || patientID == PersistentObject.INVALID_OBJECT_ID) {\r\n            throw new AssertionError(\"The patient ID should be greate than 0\");\r\n        }\r\n        List<HospitalStay> hospitalStays = new ArrayList<>();\r\n        Connection connection = null;\r\n        PreparedStatement pstmt = null;\r\n        ResultSet resultSet = null;\r\n\r\n        try {\r\n            connection = getConnection();\r\n\r\n            String query = \"SELECT ID, PID, SID, Aufnahmedatum, Entlassdatum FROM Aufenthalt WHERE PID = ?\";\r\n\r\n            pstmt = connection.prepareStatement(query);\r\n            pstmt.setLong(1, patientID);\r\n\r\n            resultSet = pstmt.executeQuery();\r\n\r\n            while (resultSet.next()) {\r\n                long stayID = resultSet.getLong(\"ID\");\r\n                long wardID = resultSet.getLong(\"SID\");\r\n                long patientIDFromQuery = resultSet.getLong(\"PID\");\r\n                Date admissionDate = resultSet.getDate(\"Aufnahmedatum\");\r\n                Date dischargeDate = resultSet.getDate(\"Entlassdatum\");\r\n                HospitalStay hospitalStay = new HospitalStayImpl(this, stayID, admissionDate,\r\n                        dischargeDate, getWard(wardID), getPatient(patientIDFromQuery));\r\n                hospitalStays.add(hospitalStay);\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        return hospitalStays;\r\n    }\r\n\r\n    @Override\r\n    public List<HospitalStay> getHospitalStays(long patientID, Date startDate, Date endDate) {\r\n        restoreConnection();\r\n        if (patientID <= 0 || patientID == PersistentObject.INVALID_OBJECT_ID) {\r\n            throw new AssertionError(\"The patient ID should be greate than 0\");\r\n        }\r\n        if (endDate != null && startDate != null && startDate.after(endDate)) {\r\n            throw new AssertionError(\"The start date cannot be later than the enddate!\");\r\n        }\r\n        List<HospitalStay> hospitalStays = new ArrayList<>();\r\n        Connection connection = null;\r\n        PreparedStatement pstmt = null;\r\n        ResultSet resultSet = null;\r\n\r\n        try {\r\n            connection = getConnection();\r\n            StringBuilder queryBuilder = new StringBuilder();\r\n            queryBuilder.append(\"SELECT ID, PID, SID, Aufnahmedatum, Entlassdatum FROM Aufenthalt WHERE PID = ?\");\r\n            if (startDate != null) {\r\n                queryBuilder.append(\" AND Aufnahmedatum >= ?\");\r\n            }\r\n            if (endDate != null) {\r\n                queryBuilder.append(\" AND Entlassdatum <= ?\");\r\n            }\r\n\r\n            pstmt = connection.prepareStatement(queryBuilder.toString());\r\n            pstmt.setLong(1, patientID);\r\n\r\n            int parameterIndex = 2;\r\n            if (startDate != null) {\r\n                pstmt.setDate(parameterIndex++, new java.sql.Date(startDate.getTime()));\r\n            }\r\n            if (endDate != null) {\r\n                pstmt.setDate(parameterIndex++, new java.sql.Date(endDate.getTime()));\r\n            }\r\n\r\n            resultSet = pstmt.executeQuery();\r\n\r\n            while (resultSet.next()) {\r\n                long stayID = resultSet.getLong(\"ID\");\r\n                long wardID = resultSet.getLong(\"SID\");\r\n                Date admissionDate = resultSet.getDate(\"Aufnahmedatum\");\r\n                Date dischargeDate = resultSet.getDate(\"Entlassdatum\");\r\n\r\n                HospitalStay hospitalStay = new HospitalStayImpl(this, stayID, admissionDate,\r\n                        dischargeDate, getWard(wardID), getPatient(patientID));\r\n                hospitalStays.add(hospitalStay);\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        return hospitalStays;\r\n    }\r\n\r\n    /**\r\n     * Restores the database connection if it is closed.\r\n     * If the connection is closed, it establishes a new connection using the stored database URL,\r\n     * username, and password.\r\n     * This method ensures that the database connection is available for use and prevents\r\n     * SQLExceptions due to closed connections.\r\n     *\r\n     * @return The restored database connection.\r\n     * @throws RuntimeException If an SQL exception occurs while restoring the connection.\r\n     */\r\n    public Connection restoreConnection() {\r\n        try {\r\n            if (getConnection().isClosed()) {\r\n                this.conn = DriverManager.getConnection(getDB_URL(), getUSER(), getPASS());\r\n            }\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n        return this.conn;\r\n    }\r\n\r\n\r\n\r\n    @Override\r\n    public double getAverageHospitalStayDuration(long wardID) {\r\n        restoreConnection();\r\n        if (wardID <= 0 || wardID == PersistentObject.INVALID_OBJECT_ID) {\r\n            throw new AssertionError(\"Invalid ward ID\");\r\n        }\r\n        double averageStayDuration = 0.0;\r\n        try (Connection connection = getConnection()) {\r\n            String query = \"SELECT AVG(Entlassdatum - Aufnahmedatum) AS avg_duration \" +\r\n                    \"FROM Aufenthalt \" +\r\n                    \"WHERE SID = ? AND Aufnahmedatum IS NOT NULL AND Entlassdatum IS NOT NULL\";\r\n\r\n            try (PreparedStatement statement = connection.prepareStatement(query)) {\r\n                statement.setLong(1, wardID);\r\n\r\n                try (ResultSet resultSet = statement.executeQuery()) {\r\n                    if (resultSet.next()) {\r\n                        averageStayDuration = resultSet.getDouble(\"avg_duration\");\r\n                    }\r\n                }\r\n            }\r\n        } catch (SQLException e) {\r\n\r\n            e.printStackTrace();\r\n        }\r\n        return averageStayDuration;\r\n    }\r\n\r\n    @Override\r\n    public int getAllocatedBeds(Ward ward) {\r\n        restoreConnection();\r\n        if (ward != null && !ward.isPersistent()) {\r\n            throw new AssertionError(\"The specified ward must be persistent\");\r\n        }\r\n\r\n        int allocatedBedsCount = 0;\r\n        try (Connection connection = getConnection()) {\r\n            String query;\r\n            if (ward != null) {\r\n                query = \"SELECT COUNT(*) AS allocated_beds \" +\r\n                        \"FROM Aufenthalt \" +\r\n                        \"WHERE SID = ? AND Entlassdatum IS NULL\";\r\n            } else {\r\n                query = \"SELECT COUNT(*) AS allocated_beds \" +\r\n                        \"FROM Aufenthalt \" +\r\n                        \"WHERE Entlassdatum IS NULL\";\r\n            }\r\n            try (PreparedStatement statement = connection.prepareStatement(query)) {\r\n                if (ward != null) {\r\n                    statement.setLong(1, ward.getObjectID());\r\n                }\r\n                try (ResultSet resultSet = statement.executeQuery()) {\r\n                    if (resultSet.next()) {\r\n                        allocatedBedsCount = resultSet.getInt(\"allocated_beds\");\r\n                    }\r\n                }\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        return allocatedBedsCount;\r\n    }\r\n    //CONSIDER using one function in another\r\n\r\n    /**\r\n     * Retrieves the number of free beds in the specified ward or in all wards if no ward is specified.\r\n     * Calculates the number of free beds by subtracting the count of occupied beds from the total bed count\r\n     * in the ward(s).\r\n     *\r\n     * @param ward The ward for which to retrieve the number of free beds. If null, retrieves\r\n     *        the number of free beds in all wards.\r\n     * @return The number of free beds in the specified ward or in all wards if no ward is specified.\r\n     * @throws AssertionError If the specified ward is not persistent.\r\n     * @throws RuntimeException If an SQL exception occurs while querying the database.\r\n     */\r\n    public int getFreeBeds(Ward ward) {\r\n        restoreConnection();\r\n        if (ward != null && !ward.isPersistent()) {\r\n            throw new AssertionError(\"The specified ward must be persistent\");\r\n        }\r\n\r\n        int freeBedsCount = 0;\r\n\r\n        try (Connection connection = getConnection()) {\r\n            String query;\r\n            if (ward != null) {\r\n                query = \"SELECT Bettenzahl - (\\n\" +\r\n                    \"    SELECT COUNT(*) \\n\" +\r\n                    \"    FROM Aufenthalt \\n\" +\r\n                    \"    WHERE Aufenthalt.SID = Station.ID AND Aufenthalt.Entlassdatum IS NULL\\n\" +\r\n                    \") AS free_beds\\n\" +\r\n                    \"FROM Station\\n\" +\r\n                    \"WHERE Station.ID = ?;\";\r\n            } else {\r\n                query = \"SELECT SUM(Bettenzahl - (\\n\" +\r\n                    \"    SELECT COUNT(*)\\n\" +\r\n                    \"    FROM Aufenthalt\\n\" +\r\n                    \"    WHERE Aufenthalt.SID = Station.ID AND Aufenthalt.Entlassdatum IS NULL\\n\" +\r\n                    \")) AS free_beds\\n\" +\r\n                    \"FROM Station;\";;\r\n            }\r\n            try (PreparedStatement statement = connection.prepareStatement(query)) {\r\n                if (ward != null) {\r\n                    statement.setLong(1, ward.getObjectID());\r\n                }\r\n                try (ResultSet resultSet = statement.executeQuery()) {\r\n                    if (resultSet.next()) {\r\n                        freeBedsCount = resultSet.getInt(\"free_beds\");\r\n                    }\r\n                }\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        return freeBedsCount;\r\n    }\r\n\r\n    @Override\r\n   public long store(PersistentObject persistentObject) {\r\n        if (persistentObject == null) {\r\n            throw new AssertionError(\"The object should not be null!\");\r\n        }\r\n        restoreConnection();\r\n        try {\r\n            if (persistentObject instanceof Patient) {\r\n                return ((PatientImpl) persistentObject).store(getConnection());\r\n            } else if (persistentObject instanceof Ward) {\r\n                return ((WardImpl) persistentObject).store(getConnection());\r\n            } else if (persistentObject instanceof HospitalStay) {\r\n                return ((HospitalStayImpl) persistentObject).store(getConnection());\r\n            } else {\r\n                throw new StoreException(\"Unsupported type: \" + persistentObject.getClass().getName());\r\n            }\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n\r\n    @Override\r\n    public void close() {\r\n        try {\r\n            this.conn.close();\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/de/hshn/mi/pdbg/basicservice/services/BasicDBServiceImpl.java b/src/main/java/de/hshn/mi/pdbg/basicservice/services/BasicDBServiceImpl.java
--- a/src/main/java/de/hshn/mi/pdbg/basicservice/services/BasicDBServiceImpl.java	
+++ b/src/main/java/de/hshn/mi/pdbg/basicservice/services/BasicDBServiceImpl.java	
@@ -2,10 +2,10 @@
 
 import de.hshn.mi.pdbg.PersistentObject;
 import de.hshn.mi.pdbg.basicservice.BasicDBService;
-import de.hshn.mi.pdbg.basicservice.EntityImpl.HospitalStayImpl;
-import de.hshn.mi.pdbg.basicservice.EntityImpl.PatientImpl;
+import de.hshn.mi.pdbg.basicservice.entityImpl.HospitalStayImpl;
+import de.hshn.mi.pdbg.basicservice.entityImpl.PatientImpl;
 
-import de.hshn.mi.pdbg.basicservice.EntityImpl.WardImpl;
+import de.hshn.mi.pdbg.basicservice.entityImpl.WardImpl;
 import de.hshn.mi.pdbg.basicservice.HospitalStay;
 import de.hshn.mi.pdbg.basicservice.Patient;
 import de.hshn.mi.pdbg.basicservice.Ward;
Index: src/main/java/de/hshn/mi/pdbg/basicservice/EntityImpl/HospitalStayImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/de/hshn/mi/pdbg/basicservice/EntityImpl/HospitalStayImpl.java b/src/main/java/de/hshn/mi/pdbg/basicservice/entityImpl/HospitalStayImpl.java
rename from src/main/java/de/hshn/mi/pdbg/basicservice/EntityImpl/HospitalStayImpl.java
rename to src/main/java/de/hshn/mi/pdbg/basicservice/entityImpl/HospitalStayImpl.java
--- a/src/main/java/de/hshn/mi/pdbg/basicservice/EntityImpl/HospitalStayImpl.java	
+++ b/src/main/java/de/hshn/mi/pdbg/basicservice/entityImpl/HospitalStayImpl.java	
@@ -1,4 +1,4 @@
-package de.hshn.mi.pdbg.basicservice.EntityImpl;
+package de.hshn.mi.pdbg.basicservice.entityImpl;
 
 import de.hshn.mi.pdbg.PersistentObject;
 import de.hshn.mi.pdbg.basicservice.BasicDBService;
Index: src/main/java/de/hshn/mi/pdbg/basicservice/EntityImpl/WardImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/de/hshn/mi/pdbg/basicservice/EntityImpl/WardImpl.java b/src/main/java/de/hshn/mi/pdbg/basicservice/entityImpl/WardImpl.java
rename from src/main/java/de/hshn/mi/pdbg/basicservice/EntityImpl/WardImpl.java
rename to src/main/java/de/hshn/mi/pdbg/basicservice/entityImpl/WardImpl.java
--- a/src/main/java/de/hshn/mi/pdbg/basicservice/EntityImpl/WardImpl.java	
+++ b/src/main/java/de/hshn/mi/pdbg/basicservice/entityImpl/WardImpl.java	
@@ -1,4 +1,4 @@
-package de.hshn.mi.pdbg.basicservice.EntityImpl;
+package de.hshn.mi.pdbg.basicservice.entityImpl;
 
 import de.hshn.mi.pdbg.PersistentObject;
 import de.hshn.mi.pdbg.basicservice.BasicDBService;
Index: src/main/java/de/hshn/mi/pdbg/basicservice/EntityImpl/PersonImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/de/hshn/mi/pdbg/basicservice/EntityImpl/PersonImpl.java b/src/main/java/de/hshn/mi/pdbg/basicservice/entityImpl/PersonImpl.java
rename from src/main/java/de/hshn/mi/pdbg/basicservice/EntityImpl/PersonImpl.java
rename to src/main/java/de/hshn/mi/pdbg/basicservice/entityImpl/PersonImpl.java
--- a/src/main/java/de/hshn/mi/pdbg/basicservice/EntityImpl/PersonImpl.java	
+++ b/src/main/java/de/hshn/mi/pdbg/basicservice/entityImpl/PersonImpl.java	
@@ -1,12 +1,10 @@
-package de.hshn.mi.pdbg.basicservice.EntityImpl;
+package de.hshn.mi.pdbg.basicservice.entityImpl;
 
 import de.hshn.mi.pdbg.PersistentObject;
 import de.hshn.mi.pdbg.basicservice.BasicDBService;
 import de.hshn.mi.pdbg.basicservice.Person;
 import de.hshn.mi.pdbg.basicservice.jdbc.AbstractPersistentJDBCObject;
 
-import java.sql.Connection;
-import java.sql.SQLException;
 import java.util.Date;
 
 /**
Index: src/main/java/de/hshn/mi/pdbg/basicservice/EntityImpl/PatientImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/de/hshn/mi/pdbg/basicservice/EntityImpl/PatientImpl.java b/src/main/java/de/hshn/mi/pdbg/basicservice/entityImpl/PatientImpl.java
rename from src/main/java/de/hshn/mi/pdbg/basicservice/EntityImpl/PatientImpl.java
rename to src/main/java/de/hshn/mi/pdbg/basicservice/entityImpl/PatientImpl.java
--- a/src/main/java/de/hshn/mi/pdbg/basicservice/EntityImpl/PatientImpl.java	
+++ b/src/main/java/de/hshn/mi/pdbg/basicservice/entityImpl/PatientImpl.java	
@@ -1,4 +1,4 @@
-package de.hshn.mi.pdbg.basicservice.EntityImpl;
+package de.hshn.mi.pdbg.basicservice.entityImpl;
 
 import de.hshn.mi.pdbg.PersistentObject;
 import de.hshn.mi.pdbg.basicservice.BasicDBService;
